<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <ApplicationIcon>Assets\icon.ico</ApplicationIcon>
    <Platforms>AnyCPU;x86;ARM32;ARM64;x64</Platforms>
  </PropertyGroup>

  
  <ItemGroup>
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  
  <ItemGroup>
    <Content Include="Assets\icon.ico" />
  </ItemGroup>
	

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.0.10" />
    <PackageReference Include="Avalonia.FreeDesktop" Version="11.0.10" />
    <PackageReference Include="Avalonia.Skia" Version="11.0.10" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.0.10" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.0.10" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.2" />

    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.0.10" />
    <PackageReference Include="KristofferStrube.Blazor.DOM" Version="0.2.1" />
    <PackageReference Include="KristofferStrube.Blazor.MediaCaptureStreams" Version="0.2.0" />
    <PackageReference Include="KristofferStrube.Blazor.WebIDL" Version="0.5.0" />
    <PackageReference Include="Meadow.Foundation" Version="1.10.2" />
    <PackageReference Include="Meadow.Linux" Version="1.10.2" />
    <PackageReference Include="Meadow.Windows" Version="1.10.2" />
    <PackageReference Include="Microsoft.AspNetCore.Components" Version="8.0.4" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.4" />
    <PackageReference Include="Microsoft.JSInterop" Version="8.0.4" />
    <PackageReference Include="Microsoft.JSInterop.WebAssembly" Version="8.0.4" />
    <PackageReference Include="Microsoft.NET.Runtime.Emscripten.3.1.34.Sdk.win-x64" Version="8.0.4" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="libs\arm64\" />
    <Folder Include="libs\arm32\" />
    <Folder Include="libs\bindings\" />
    <Folder Include="libs\wasm\" />
    <Folder Include="libs\x86\" />
    <Folder Include="libs\x64\" />
  </ItemGroup>

  <!--Native libraries can't target AnyCPU.-->
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <PropertyGroup><!--Set GCC to target a specific arch regardless of the host machine-->
	  <GccArch></GccArch>
        <GccArch Condition="'$(Platform)'=='x86'">i686-linux-gnu-</GccArch>
        <GccArch Condition="'$(Platform)'=='x64'">x86_64-linux-gnu-</GccArch>
        <GccArch Condition="'$(Platform)'=='arm32'">arm-linux-gnueabi-</GccArch>
        <GccArch Condition="'$(Platform)'=='arm64'">aarch64-linux-gnu-</GccArch>
	    <GccArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X86'&amp;$(Platform)' = 'AnyCPU'">i686-linux-gnu-</GccArch>
		<GccArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64'&amp;$(Platform)' = 'AnyCPU'">x86_64-linux-gnu-</GccArch>
		<GccArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'ARM32'&amp;$(Platform)' = 'AnyCPU'">arm-linux-gnueabi-</GccArch>
		<GccArch Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'ARM64'&amp;$(Platform)' = 'AnyCPU'">aarch64-linux-gnu-</GccArch>
	    <VSEnv>call "$(DevEnvDir)..\..\VC\Auxiliary\Build\vcvarsall.bat" $(Platform)</VSEnv>
	    <VSEnv Condition="$(Platform)' = 'AnyCPU'">call "$(DevEnvDir)..\..\VC\Auxiliary\Build\vcvarsall.bat" $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</VSEnv>
    </PropertyGroup>
	  <RemoveDir Directories="\libs\bindings\Miniaudio\" />
	<Exec Command="cd $(ProjectDir)&#xD;&#xA;dotnet tool install --global ClangSharpPInvokeGenerator&#xD;&#xA;git submodule update --init --recursive" />
	<Exec Command="cd $(ProjectDir) &amp; echo 'wasm' &#xD;&#xA;emcc extern/miniaudio.c -o libs/wasm/miniaudio.js -shared" />
    <Exec Condition="$([MSBuild]::IsOSPlatform('Windows'))&amp;$(Platform)' != 'AnyCPU'" Command="$(VSEnv) &amp; cd $(ProjectDir)&#xD;&#xA;cl /LD extern/miniaudio.c /Felibs/$(Platform)/miniaudio.dll /Folibs/$(Platform)/miniaudio.obj&#xD;&#xA;ClangSharpPInvokeGenerator -n MiniAudioSharp -f extern/miniaudio/miniaudio.h -o libs/bindings/Miniaudio/ --include-directory %VCINSTALLDIR%\Tools\Llvm\lib\clang\17\include" />
    <Exec Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))'" Command="cd $(ProjectDir)&#xD;&#xA;$(GccArch)gcc -shared -o libs/$(Platform)/miniaudio_linux.so extern/miniaudio.c -lpthread -lm -ldl&#xD;&#xA;ClangSharpPInvokeGenerator -n MiniAudioSharp -f extern/miniaudio/miniaudio.h -o libs/bindings/Miniaudio/ --include-directory /usr/lib/clang/$(ls /usr/lib/clang | grep -E '^[0-9]+$' | sort -n | tail -1)/include/" />
  </Target>
</Project>
